{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4f4a63c6",
   "metadata": {},
   "source": [
    "# Quick `ms3` reference\n",
    "\n",
    "## To run this notebook\n",
    "\n",
    "* install ms3 (`pip install ms3`)\n",
    "* set the `DATA_PATH` to where you want the folder `dcml_corpora` to be created that contains the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6a20160e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "DATA_PATH = '~'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2826d091",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9d608b25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dcml_corpora @ commit 9dcde40cba36d31b900ff12852cc557b8cca8221\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import ms3\n",
    "from git import Repo\n",
    "\n",
    "corpora_path = os.path.join(os.path.expanduser(DATA_PATH), 'dcml_corpora')\n",
    "if os.path.isdir(corpora_path):\n",
    "    repo = Repo(corpora_path)\n",
    "else:\n",
    "    repo = Repo.clone_from(url='https://github.com/DCMLab/dcml_corpora.git', \n",
    "                to_path=corpora_path, \n",
    "                multi_options=['--recurse-submodules', '--shallow-submodules'])\n",
    "print(f\"dcml_corpora @ commit {repo.commit().hexsha}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afdfa31b",
   "metadata": {},
   "source": [
    "## Parsing multiple scores at once\n",
    "\n",
    "### The Corpus object\n",
    "\n",
    "Scores often come grouped into a corpus, so when we want to parse multiple scores, we create a [Corpus](Corpus) object and pass it the directory containing the scores. `ms3` will scan the directory and discover all scores and TSV files that can be potentially parsed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f6fe838c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[\u001b[1mdefault\u001b[0;0m|all]\n",
       "Corpus 'tchaikovsky_seasons'\n",
       "----------------------------\n",
       "Location: /home/hentsche/dcml_corpora/tchaikovsky_seasons\n",
       "View: This view is called 'default'. It \n",
       "\t- excludes fnames that are not contained in the metadata,\n",
       "\t- filters out file extensions requiring conversion (such as .xml), and\n",
       "\t- excludes review files and folders.\n",
       "\n",
       "All 12 pieces are listed in 'metadata.tsv':\n",
       "\n",
       "          scores measures    notes expanded   events   chords\n",
       "        detected detected detected detected detected detected\n",
       "op37a01        1        1        1        1        1        1\n",
       "op37a02        1        1        1        1        1        1\n",
       "op37a03        1        1        1        1        1        1\n",
       "op37a04        1        1        1        1        1        1\n",
       "op37a05        1        1        1        1        1        1\n",
       "op37a06        1        1        1        1        1        1\n",
       "op37a07        1        1        1        1        1        1\n",
       "op37a08        1        1        1        1        1        1\n",
       "op37a09        1        1        1        1        1        1\n",
       "op37a10        1        1        1        1        1        1\n",
       "op37a11        1        1        1        1        1        1\n",
       "op37a12        1        1        1        1        1        1\n",
       "24/96 files are excluded from this view.\n",
       "\n",
       "24 files have been excluded based on their subdir."
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corelli_path = os.path.join(corpora_path, 'tchaikovsky_seasons')\n",
    "corpus = ms3.Corpus(corelli_path)\n",
    "corpus"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d46515f",
   "metadata": {},
   "source": [
    "When inspecting this object,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2787b8eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[\u001b[1mdefault\u001b[0;0m|all]\n",
       "All corpora\n",
       "-----------\n",
       "View: This view is called 'default'. It \n",
       "\t- excludes fnames that are not contained in the metadata,\n",
       "\t- filters out file extensions requiring conversion (such as .xml), and\n",
       "\t- excludes review files and folders.\n",
       "\n",
       "                               has   active   scores measures    notes expanded   events   chords\n",
       "                          metadata     view detected detected detected detected detected detected\n",
       "corpus                                                                                           \n",
       "ABC                            yes  default       70       70       70       70        0       70\n",
       "beethoven_piano_sonatas        yes  default       87       87       87       64        0       87\n",
       "chopin_mazurkas                yes  default       55       55       55       55        0       55\n",
       "corelli                        yes  default      149      149      149      149        0      149\n",
       "debussy_suite_bergamasque      yes  default        4        4        4        4        0        4\n",
       "dvorak_silhouettes             yes  default       12       12       12       12        0       12\n",
       "grieg_lyrical_pieces           yes  default       66       66       66       66        0       66\n",
       "liszt_pelerinage               yes  default       19       19       19       19        0       19\n",
       "medtner_tales                  yes  default       19       19       19       19        0       19\n",
       "mozart_piano_sonatas           yes  default       54       54       54       54        0       54\n",
       "schumann_kinderszenen          yes  default       13       13       13       13        0       13\n",
       "tchaikovsky_seasons            yes  default       12       12       12       12       12       12\n",
       "\n",
       "1648/4997 files are excluded from this view.\n",
       "\n",
       "1611 files have been excluded based on their subdir.\n",
       "37 files have been excluded based on their file name.\n",
       "\n",
       "\n",
       "There are 1 orphans that could not be attributed to any of the respective corpus's fnames."
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corpora = ms3.Parse(corpora_path, level='c')\n",
    "corpora"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd07d634",
   "metadata": {},
   "source": [
    "**From here we can use the methods**\n",
    "\n",
    "* [parse_scores()](Parse.parse_scores()) to parse all detected scores,\n",
    "* [parse_tsv()](Parse.parse_tsv()) to parse all detected TSV files (previously extracted from scores),\n",
    "* [parse()](Parse.parse()) to parse everything."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "374cdf69",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-17:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-20:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-13:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-22:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-21:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-15:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-16:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-18:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-24:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-23:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-19:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Process ForkPoolWorker-14:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/bs4/element.py\", line 823, in _find_all\n",
      "    i = next(generator)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "StopIteration\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 51, in starmapstar\n",
      "    return list(itertools.starmap(args[0], args[1]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 51, in starmapstar\n",
      "    return list(itertools.starmap(args[0], args[1]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 51, in starmapstar\n",
      "    return list(itertools.starmap(args[0], args[1]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 131, in worker\n",
      "    put((job, i, result))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 51, in starmapstar\n",
      "    return list(itertools.starmap(args[0], args[1]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/corpus.py\", line 3016, in parse_musescore_file\n",
      "    score = Score(path, read_only=read_only, ms=ms, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/corpus.py\", line 3016, in parse_musescore_file\n",
      "    score = Score(path, read_only=read_only, ms=ms, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/corpus.py\", line 3016, in parse_musescore_file\n",
      "    score = Score(path, read_only=read_only, ms=ms, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 51, in starmapstar\n",
      "    return list(itertools.starmap(args[0], args[1]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/corpus.py\", line 3016, in parse_musescore_file\n",
      "    score = Score(path, read_only=read_only, ms=ms, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/queues.py\", line 374, in put\n",
      "    obj = _ForkingPickler.dumps(obj)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 51, in starmapstar\n",
      "    return list(itertools.starmap(args[0], args[1]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1130, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 314, in _bootstrap\n",
      "    self.run()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 51, in starmapstar\n",
      "    return list(itertools.starmap(args[0], args[1]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1130, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1130, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/corpus.py\", line 3016, in parse_musescore_file\n",
      "    score = Score(path, read_only=read_only, ms=ms, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1807, in parse_mscx\n",
      "    self._mscx = MSCX(musescore_file, read_only=self.read_only, parser=self.parser, labels_cfg=self.labels_cfg, parent_score=self, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/reduction.py\", line 54, in dumps\n",
      "    cls(buf, protocol, *args, **kwds).dump(obj)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/process.py\", line 108, in run\n",
      "    self._target(*self._args, **self._kwargs)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1807, in parse_mscx\n",
      "    self._mscx = MSCX(musescore_file, read_only=self.read_only, parser=self.parser, labels_cfg=self.labels_cfg, parent_score=self, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 131, in worker\n",
      "    put((job, i, result))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1130, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1130, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 172, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/dill/_dill.py\", line 394, in dump\n",
      "    StockPickler.dump(self, obj)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1807, in parse_mscx\n",
      "    self._mscx = MSCX(musescore_file, read_only=self.read_only, parser=self.parser, labels_cfg=self.labels_cfg, parent_score=self, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/corpus.py\", line 3016, in parse_musescore_file\n",
      "    score = Score(path, read_only=read_only, ms=ms, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/corpus.py\", line 3016, in parse_musescore_file\n",
      "    score = Score(path, read_only=read_only, ms=ms, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 51, in starmapstar\n",
      "    return list(itertools.starmap(args[0], args[1]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 172, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1807, in parse_mscx\n",
      "    self._mscx = MSCX(musescore_file, read_only=self.read_only, parser=self.parser, labels_cfg=self.labels_cfg, parent_score=self, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/queues.py\", line 374, in put\n",
      "    obj = _ForkingPickler.dumps(obj)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1807, in parse_mscx\n",
      "    self._mscx = MSCX(musescore_file, read_only=self.read_only, parser=self.parser, labels_cfg=self.labels_cfg, parent_score=self, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 808, in parse_mscx\n",
      "    self._parsed = _MSCX_bs4(self.mscx_src, read_only=self.read_only, logger_cfg=self.logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/pickle.py\", line 487, in dump\n",
      "    self.save(obj)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 172, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1130, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/corpus.py\", line 3016, in parse_musescore_file\n",
      "    score = Score(path, read_only=read_only, ms=ms, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 51, in starmapstar\n",
      "    return list(itertools.starmap(args[0], args[1]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 808, in parse_mscx\n",
      "    self._parsed = _MSCX_bs4(self.mscx_src, read_only=self.read_only, logger_cfg=self.logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 172, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/reduction.py\", line 54, in dumps\n",
      "    cls(buf, protocol, *args, **kwds).dump(obj)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 172, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/bs4_parser.py\", line 169, in __init__\n",
      "    self.parse_measures()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/dill/_dill.py\", line 388, in save\n",
      "    StockPickler.save(self, obj, save_persistent_id)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 808, in parse_mscx\n",
      "    self._parsed = _MSCX_bs4(self.mscx_src, read_only=self.read_only, logger_cfg=self.logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1130, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1807, in parse_mscx\n",
      "    self._mscx = MSCX(musescore_file, read_only=self.read_only, parser=self.parser, labels_cfg=self.labels_cfg, parent_score=self, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 125, in worker\n",
      "    result = (True, func(*args, **kwds))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/corpus.py\", line 3016, in parse_musescore_file\n",
      "    score = Score(path, read_only=read_only, ms=ms, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1130, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/bs4_parser.py\", line 169, in __init__\n",
      "    self.parse_measures()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 808, in parse_mscx\n",
      "    self._parsed = _MSCX_bs4(self.mscx_src, read_only=self.read_only, logger_cfg=self.logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/bs4_parser.py\", line 275, in parse_measures\n",
      "    dur, dot_multiplier = bs4_chord_duration(event_node, duration_multiplier)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 808, in parse_mscx\n",
      "    self._parsed = _MSCX_bs4(self.mscx_src, read_only=self.read_only, logger_cfg=self.logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/pickle.py\", line 560, in save\n",
      "    f(self, obj)  # Call unbound method with explicit self\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/bs4_parser.py\", line 169, in __init__\n",
      "    self.parse_measures()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/dill/_dill.py\", line 394, in dump\n",
      "    StockPickler.dump(self, obj)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1807, in parse_mscx\n",
      "    self._mscx = MSCX(musescore_file, read_only=self.read_only, parser=self.parser, labels_cfg=self.labels_cfg, parent_score=self, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 172, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py\", line 51, in starmapstar\n",
      "    return list(itertools.starmap(args[0], args[1]))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1807, in parse_mscx\n",
      "    self._mscx = MSCX(musescore_file, read_only=self.read_only, parser=self.parser, labels_cfg=self.labels_cfg, parent_score=self, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/bs4_parser.py\", line 169, in __init__\n",
      "    self.parse_measures()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/bs4_parser.py\", line 226, in parse_measures\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 1130, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/bs4_parser.py\", line 2476, in bs4_chord_duration\n",
      "    return nominal_duration * duration_multiplier * dotmultiplier, dotmultiplier\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/bs4_parser.py\", line 169, in __init__\n",
      "    self.parse_measures()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/bs4_parser.py\", line 416, in parse_measures\n",
      "    self.update_metadata()\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[5], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mcorpora\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparse_scores\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m corpora\n",
      "File \u001b[0;32m~/miniconda3/lib/python3.10/site-packages/ms3/parse.py:1421\u001b[0m, in \u001b[0;36mParse.parse_scores\u001b[0;34m(self, level, parallel, only_new, labels_cfg, view_name, choose)\u001b[0m\n\u001b[1;32m   1419\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mchange_logger_cfg(level\u001b[38;5;241m=\u001b[39mlevel)\n\u001b[1;32m   1420\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m corpus_name, corpus \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39miter_corpora(view_name\u001b[38;5;241m=\u001b[39mview_name):\n\u001b[0;32m-> 1421\u001b[0m     \u001b[43mcorpus\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparse_scores\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1422\u001b[0m \u001b[43m                        \u001b[49m\u001b[43mparallel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparallel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1423\u001b[0m \u001b[43m                        \u001b[49m\u001b[43monly_new\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43monly_new\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1424\u001b[0m \u001b[43m                        \u001b[49m\u001b[43mlabels_cfg\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabels_cfg\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1425\u001b[0m \u001b[43m                        \u001b[49m\u001b[43mview_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mview_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1426\u001b[0m \u001b[43m                        \u001b[49m\u001b[43mchoose\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mchoose\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/miniconda3/lib/python3.10/site-packages/ms3/corpus.py:1591\u001b[0m, in \u001b[0;36mCorpus.parse_scores\u001b[0;34m(self, level, parallel, only_new, labels_cfg, view_name, choose)\u001b[0m\n\u001b[1;32m   1589\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m parallel:\n\u001b[1;32m   1590\u001b[0m     pool \u001b[38;5;241m=\u001b[39m mp\u001b[38;5;241m.\u001b[39mPool(mp\u001b[38;5;241m.\u001b[39mcpu_count())\n\u001b[0;32m-> 1591\u001b[0m     res \u001b[38;5;241m=\u001b[39m \u001b[43mpool\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstarmap\u001b[49m\u001b[43m(\u001b[49m\u001b[43mparse_musescore_file\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparse_this\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1592\u001b[0m     pool\u001b[38;5;241m.\u001b[39mclose()\n\u001b[1;32m   1593\u001b[0m     pool\u001b[38;5;241m.\u001b[39mjoin()\n",
      "File \u001b[0;32m~/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py:375\u001b[0m, in \u001b[0;36mPool.starmap\u001b[0;34m(self, func, iterable, chunksize)\u001b[0m\n\u001b[1;32m    369\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mstarmap\u001b[39m(\u001b[38;5;28mself\u001b[39m, func, iterable, chunksize\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m    370\u001b[0m     \u001b[38;5;124;03m'''\u001b[39;00m\n\u001b[1;32m    371\u001b[0m \u001b[38;5;124;03m    Like `map()` method but the elements of the `iterable` are expected to\u001b[39;00m\n\u001b[1;32m    372\u001b[0m \u001b[38;5;124;03m    be iterables as well and will be unpacked as arguments. Hence\u001b[39;00m\n\u001b[1;32m    373\u001b[0m \u001b[38;5;124;03m    `func` and (a, b) becomes func(a, b).\u001b[39;00m\n\u001b[1;32m    374\u001b[0m \u001b[38;5;124;03m    '''\u001b[39;00m\n\u001b[0;32m--> 375\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_map_async\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43miterable\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstarmapstar\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mchunksize\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py:768\u001b[0m, in \u001b[0;36mApplyResult.get\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    767\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget\u001b[39m(\u001b[38;5;28mself\u001b[39m, timeout\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[0;32m--> 768\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwait\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtimeout\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    769\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mready():\n\u001b[1;32m    770\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTimeoutError\u001b[39;00m\n",
      "File \u001b[0;32m~/miniconda3/lib/python3.10/site-packages/multiprocess/pool.py:765\u001b[0m, in \u001b[0;36mApplyResult.wait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    764\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mwait\u001b[39m(\u001b[38;5;28mself\u001b[39m, timeout\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[0;32m--> 765\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_event\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwait\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtimeout\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/miniconda3/lib/python3.10/threading.py:600\u001b[0m, in \u001b[0;36mEvent.wait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    598\u001b[0m signaled \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_flag\n\u001b[1;32m    599\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m signaled:\n\u001b[0;32m--> 600\u001b[0m     signaled \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_cond\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwait\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtimeout\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    601\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m signaled\n",
      "File \u001b[0;32m~/miniconda3/lib/python3.10/threading.py:320\u001b[0m, in \u001b[0;36mCondition.wait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    318\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:    \u001b[38;5;66;03m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[39;00m\n\u001b[1;32m    319\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m timeout \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 320\u001b[0m         \u001b[43mwaiter\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43macquire\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    321\u001b[0m         gotit \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m    322\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/pickle.py\", line 887, in save_tuple\n",
      "    save(element)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 172, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 808, in parse_mscx\n",
      "    self._parsed = _MSCX_bs4(self.mscx_src, read_only=self.read_only, logger_cfg=self.logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/corpus.py\", line 3016, in parse_musescore_file\n",
      "    score = Score(path, read_only=read_only, ms=ms, **logger_cfg)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/score.py\", line 172, in __init__\n",
      "    self.parse_mscx()\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/bs4_parser.py\", line 282, in parse_measures\n",
      "    tremolo_tag = event_node.find('Tremolo')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"/home/hentsche/miniconda3/lib/python3.10/site-packages/ms3/bs4_parser.py\", line 178, in parse_mscx\n",
      "    self.soup = bs4.BeautifulSoup(file.read(), 'xml')\n"
     ]
    }
   ],
   "source": [
    "corpora.parse_scores()\n",
    "corpora"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bc74002",
   "metadata": {},
   "source": [
    "**Now we can extract the facets we need from the parsed scores, e.g. information on all measures from all scores:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9055ca8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "corpora.get_facet('measures')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3693a7a",
   "metadata": {},
   "source": [
    "**Or we iterate through the corpora and print information on the first 10 notes:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ba70228",
   "metadata": {},
   "outputs": [],
   "source": [
    "for corpus_name, corpus_object in corpora:\n",
    "    print(f\"First ten measures of {corpus_name}:\")\n",
    "    display(corpus_object.get_facet('notes').iloc[:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "213bf585",
   "metadata": {},
   "source": [
    "**The available facets are `'measures', 'notes', 'rests', 'notes_and_rests', 'labels', 'expanded', 'form_labels', 'cadences', 'events', 'chords'`.\n",
    "We can request several at the same time:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40108c82",
   "metadata": {},
   "outputs": [],
   "source": [
    "corpora.get_facets(['labels', 'chords'])"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md:myst",
   "text_representation": {
    "extension": ".md",
    "format_name": "myst",
    "format_version": 0.13,
    "jupytext_version": "1.14.4"
   }
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "source_map": [
   13,
   22,
   26,
   30,
   43,
   51,
   55,
   59,
   62,
   70,
   73,
   77,
   79,
   83,
   87,
   92
  ]
 },
 "nbformat": 4,
 "nbformat_minor": 5
}